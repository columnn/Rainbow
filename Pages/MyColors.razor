@page "/mycolors"
@using Rainbow
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject EditColorState EditColorState

<PageTitle>MyColors</PageTitle>

<h1>My Colors</h1>

<hr>
<AuthorizeView>
    <Authorized>
        <div class="color-cards">
            @if (colors != null && colors.Count != 0)
            {
                foreach (var color in colors)
                {
                    <ColorCard 
                        Color=@color 
                        OnDelete="@(() => DeleteColor(color))" 
                        OnEdit="@(() => EditColorState.ShowEditColorDialog(color))" />
                }
            }
            else
            {
                <h3>You don't have any colors yet!</h3>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <h2>Login to view your colors</h2>
    </NotAuthorized>
</AuthorizeView>

@if (EditColorState.ShowingConfigureDialog)
{
    <EditColorDialog
        Color="EditColorState.EditingColor"
        OnCancel="EditColorState.CancelColorEdit"
        OnConfirm="(() => EditColor(EditColorState.EditingColor))" />
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }
    private AuthenticationState authState;
    private List<Color>? colors;

    protected override async Task OnInitializedAsync()
    {
        authState = await _authState;
        var username = authState.User.Identity?.Name;
        if(username is not null)
            colors = await HttpClient.GetFromJsonAsync<List<Color>>(NavigationManager.BaseUri + $"api/colors/mycolors/?username={username}");
    }

    private async Task DeleteColor(Color color)
    {
        var response = await HttpClient.DeleteAsync(NavigationManager.BaseUri + $"api/colors/{color.ColorId}");
        if(response.IsSuccessStatusCode)
            colors?.Remove(color);
    }

    private async Task EditColor(Color? color)
    {
        if(color is null)
            return;

        var response = await HttpClient.PutAsJsonAsync(NavigationManager.BaseUri + $"api/colors/{color.ColorId}", color);
        if(response.IsSuccessStatusCode)
        {
            EditColorState.EditColor();
            await OnInitializedAsync();
        }
    }
}